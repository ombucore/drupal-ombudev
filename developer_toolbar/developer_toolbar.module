<?php

/**
 * @file
 * Primary module hooks for Devel debug bar module.
 */

/**
 * Implements hook_module_implements_alter().
 */
function developer_toolbar_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'boot') {
    $group = $implementations['developer_toolbar'];
    unset($implementations['developer_toolbar']);
    $implementations['developer_toolbar'] = $group;
  }
}

/**
 * Implements hook_boot().
 */
function developer_toolbar_boot() {
  require __DIR__ . '/vendor/autoload.php';

  // Bootstrap debug bar as soon as possible.
  \DeveloperToolbar\DeveloperToolbar::getInstance();

  @include_once DRUPAL_ROOT . '/includes/database/log.inc';
  Database::startLog('developer_toolbar');;

  drupal_register_shutdown_function('developer_toolbar_shutdown');
}

/**
 * Implements hook_page_build().
 */
function developer_toolbar_page_build(&$page) {
  $environment = variable_get('environment');

  // Don't show developer toolbar on staging or production.
  if (in_array($environment, array('production', 'staging'))) {
    return;
  }

  // Don't include assets if marked as silent.
  if (developer_toolbar_silent()) {
    return;
  }

  //Get the DeveloperToolbar instance.
  $renderer = \DeveloperToolbar\DeveloperToolbar::getInstance()->getJavascriptRenderer();
  $renderer->setBasePath(drupal_get_path('module', 'developer_toolbar') . '/' . $renderer->getBaseUrl());

  // Load assets.
  list($css_files, $js_files) = $renderer->getAssets();
  foreach ($css_files as $css_file) {
    drupal_add_css($css_file);
  }
  // PHP DebugBar ships with own jQuery.
  // So we load it later to avoid conflicts.
  $options['weight'] = 100;
  foreach ($js_files as $js_file) {
    drupal_add_js($js_file, $options);
  }

  drupal_add_css(drupal_get_path('module', 'developer_toolbar') . '/css/developer_toolbar.css');
  drupal_add_js(drupal_get_path('module', 'developer_toolbar') . '/js/developer_toolbar.js', $options);
}


/**
 * Shutdown function, ensures developer toolbar always gets run.
 */
function developer_toolbar_shutdown() {
  if (!developer_toolbar_silent()) {
    print \DeveloperToolbar\DeveloperToolbar::getInstance()
      ->getJavascriptRenderer()
      ->render();
  }
}

/**
 * Implements hook_ajax_render_alter().
 *
 * Disables our footer stuff based on ajax response.
 *
 * AJAX render reponses sometimes are sent as text/html. We have to catch them
 * here and disable our footer stuff.
 */
function developer_toolbar_ajax_render_alter() {
  $GLOBALS['developer_toolbar_shutdown'] = FALSE;
}

/**
 * Checks whether developer toolbar may be active.
 *
 * Borrowed from devel_silent().
 */
function developer_toolbar_silent() {
  // isset($_GET['q']) is needed when calling the front page. q is not set.
  // Don't interfere with private files/images.
  return
    (function_exists('path_is_admin') && path_is_admin(current_path())) ||
    function_exists('drupal_is_cli') && drupal_is_cli() ||
    (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'ApacheBench') !== FALSE) ||
    !empty($_REQUEST['XDEBUG_PROFILE']) ||
    isset($GLOBALS['developer_toolbar_shutdown']) ||
    strstr($_SERVER['PHP_SELF'], 'update.php') ||
    (isset($_GET['q']) && (
      in_array($_GET['q'], array('admin/content/node-settings/rebuild')) ||
      substr($_GET['q'], 0, strlen('system/files')) == 'system/files' ||
      substr($_GET['q'], 0, strlen('batch')) == 'batch' ||
      substr($_GET['q'], 0, strlen('file/ajax')) == 'file/ajax')
    );
}
